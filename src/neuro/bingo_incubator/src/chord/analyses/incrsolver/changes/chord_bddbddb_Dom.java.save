package chord.bddbddb;

import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeSet;

import joeq.Class.jq_Type;
import chord.analyses.alias.Ctxt;
import chord.util.IndexMap;

/**
 * Generic implementation of a BDD-based domain.
 * <p>
 * Typical usage is as follows:
 * <ul>
 * <li> The domain is initialized by calling {@link #setName(String)} which sets the name of the domain. </li>
 * <li> The domain is next built in memory by repeatedly calling {@link #getOrAdd(Object)} with the argument in each call being a value
 * to be added to the domain.  If the value already exists in the domain then the call does not have any effect.  Otherwise, the value
 * is mapped to integer K in the domain where K is the number of values already in the domain. </li>
 * <li> The domain built in memory is reflected onto disk by calling {@link #save(String,boolean)}. </li>
 * <li> The domain on disk can be read by a Datalog program. </li>
 * <li> The domain in memory can be read by calling any of the following:
 * <ul>
 * <li> {@link #iterator()}, which gives an iterator over the values in the domain in memory in the order in which they were added, </li>
 * <li> {@link #get(int)}, which gives the value mapped to the specified integer in the domain in memory, and </li>
 * <li> {@link #indexOf(Object)}, which gives the integer mapped to the specified value in the domain in memory. </li>
 * </ul>
 * </li>
 * </ul>
 *
 * @param <T> The type of values in the domain.
 * 
 * @author Mayur Naik (mhn@cs.stanford.edu)
 */
public class Dom<T> extends IndexMap<T> {
    protected String name;
    private HashMap<String, T> strmap;
    private TreeSet<String> ts;
    private ArrayList<T> aelems;
    private final String libraryPrefix = ".*(@java\\.|@javax\\.|@sun\\.|@sunw\\.|@launcher\\.|@com\\.sun\\.|@com\\.ibm\\.|@org\\.apache\\.harmony\\.|@org\\.w3c\\.|@org\\.xml\\.|@org\\.ietf\\.|@org\\.omg\\.|@slib\\.).*";
    private boolean reorder;
    
    public Dom() {
    	strmap = new HashMap<String, T>();
    	ts = new TreeSet<String>();
    	aelems = new ArrayList<T>();
    	reorder = Boolean.getBoolean("chord.incrsolver.reorderDoms");
    }
    
    @Override
    public int getOrAdd(T val) {
    	if (reorder) {
	    	String ustr = toUniqueString(val);
	    	boolean islib = isLib(ustr);
	    	if (islib) {
		    	strmap.put(ustr, val);
		    	ts.add(ustr);
	    	} else {
	    		aelems.add(val);
	    	}
	    	return 0;
    	} else {
    		return super.getOrAdd(val);
    	}
    }
    
    @Override
    public boolean add(T val) {
    	if (reorder) {
    		String ustr = toUniqueString(val);
	    	boolean islib = isLib(ustr);
	    	if (islib) {
		    	strmap.put(ustr, val);
		    	ts.add(ustr);
	    	} else {
	    		aelems.add(val);
	    	}
	    	return true;
    	} else {
    		return super.add(val);
    	}
    }
    
    public boolean isLib(String ustr) {
    	boolean islib = false; 	
    	if (ustr.matches(libraryPrefix)) islib = true;
		return islib;
    }
    
    public int getNumAnchors() {
    	return 0;
    }
    
    public void setName(String name) {
        assert (name != null);
        assert (this.name == null);
        this.name = name;
    }
    public String getName() {
        return name;
    }
    /**
     * Reflects the domain in memory onto disk.
     */
    public void save(String dirName, boolean saveDomMap) throws IOException {
    	if (reorder) {
    		int anchors = getNumAnchors();
    		if (anchors >= 1) {
    			for (int i = 0; i < anchors; i++)
    				super.add(aelems.get(i));
    		}
	    	for (String str : ts) {
	    		super.getOrAdd(strmap.get(str));
	    	}
	    	for (int j = anchors; j < aelems.size(); j++) {
	    		super.add(aelems.get(j));
	    	}
    	}
        String mapFileName = "";
        if (saveDomMap) {
            mapFileName = name + ".map";
            File file = new File(dirName, mapFileName);
            PrintWriter out = new PrintWriter(file);
            int size = size();
                for (int i = 0; i < size; i++) {
                T val = get(i);
                out.println(toUniqueString(val));
            }
            out.close();
        }
        String domFileName = name + ".dom";
        File file = new File(dirName, domFileName);
        PrintWriter out = new PrintWriter(file);
        int size = size();
        out.println(name + " " + size + " " + mapFileName);
        out.close();
    }
    // subclasses may override
    public String toUniqueString(T val) {
        return val == null ? "null" : val.toString();
    }
    public String toUniqueString(int idx) {
        T val = get(idx);
        return toUniqueString(val);
    }
    /**
     * Prints the values in the domain in memory to the standard output stream.
     */
    public void print() {
        print(System.out);
    }
    /**
     * Prints the values in the domain in memory to the specified output stream.
     * 
     * @param out The output stream to which the values in the domain in memory must be printed.
     */
    public void print(PrintStream out) {
        for (int i = 0; i < size(); i++)
            out.println(get(i));
    }
    public int hashCode() {
        return System.identityHashCode(this);
    }
    public boolean equals(Object o) {
        return this == o;
    }
}
