# name=exp-kobj-bit-init-dlog
.include "I.dom"
.include "M.dom"
.include "K.dom"
.include "C.dom"
.include "H.dom"
.include "V.dom"
.bddvarorder I0xI1xI2xI3_M0xM1_C0xC1xC2xC3xC4_K0xK1xH0xH1xH2xH3_V0xV1

#Input relations
initCOC(c:C0,h:H0,c:C1) input
initCHC(c:C0,h:H0,c:C1) input
truncCKC(c:C0,k:K0,c:C1) input
HK(h:H0,k:K0) input
OK(h:H0,k:K0) input
roots(m:M0) input
IM(i:I0,m:M0) input
VH(v:V0,h:H0) input
MI(m:M0,i:I0) input
MH(m:M0,h:H0) input
CL(c:C0,k:K0) input
IinvkArg0(i:I0,v:V1) input
statM(m:M0) input
thisMV(m:M0,v:V0) input

#Output relations
AllowH(h:H0,k:K0) output
AllowO(h:H0,k:K0) output
CHC(c:C0,h:H0,c:C1) output
CHC_1(c:C0,h:H0,c:C1) output
CHC_2(c:C0,h:H0,c:C1) output
CM(c:C0,m:M0) output
COC(c:C0,h:H0,c:C1) output
COC_1(c1:C0,h:H0,c2:C1) output
COC_2(c1:C0,h:H0,c3:C1) output
DenyH(h:H0,k:K0) output
DenyO(h:H0,k:K0) output
HM(h:H0,m:M0) output

#Allow/Deny rules.
AllowH(h,l) :- 0<=l, l<=k, HK(h,k).
AllowO(o,l) :- 0<=l, l<=k, OK(o,k).
DenyH(h,l) :- HK(h,k), k<l.
DenyO(o,l) :- OK(o,k), k<l.

#Original rules
CHC(c1,h,c2) :- CHC_1(c1,h,c2), CL(c2,l), AllowH(h,l).
CHC(c1,h,c2) :- CHC_2(c1,h,c2), CL(c2,l), AllowH(h,l).
CHC_1(c1,h,c2) :- MH(m,h), CM(c1,m), initCHC(c1,h,c2).
CHC_2(c1,h,c3) :- CHC_1(c1,h,c2), CL(c2,l1), DenyH(h,l2), truncCKC(c2,l2,c3), l2<=l1.
CM(0,m) :- roots(m).
CM(c,m) :- COC(_,h,c), HM(h,m).
CM(c,m1) :- CM(c,m0), IM(i,m1), statM(m1), MI(m0,i).
COC(c1,h,c2) :- COC_1(c1,h,c2), CL(c2,l), AllowO(h,l).
COC(c1,h,c2) :- COC_2(c1,h,c2), CL(c2,l), AllowO(h,l).
COC_1(c1,h,c2) :- MH(m,h), CM(c1,m), initCOC(c1,h,c2).
COC_2(c1,h,c3) :- COC_1(c1,h,c2), CL(c2,l1), DenyO(h,l2), truncCKC(c2,l2,c3), l2<=l1.
HM(h,m) :- thisMV(m,v), VH(v,h).
