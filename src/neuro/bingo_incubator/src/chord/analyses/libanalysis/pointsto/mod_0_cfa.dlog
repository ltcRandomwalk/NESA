# Copyright (c) 2008-2010, Intel Corporation.
# Copyright (c) 2006-2007, The Trustees of Stanford University.
# All rights reserved.
# Licensed under the terms of the New BSD License.

# Context-insensitive may-alias/call-graph analysis.

# Author: Mayur Naik (mhn@cs.stanford.edu)
# name=mod-0-cfa-dlog

.include "T.dom"
.include "F.dom"
.include "M.dom"
.include "I.dom"
.include "H.dom"
.include "V.dom"
.include "Z.dom"

.bddvarorder I0xM0xM1_T0_V0xV1_T1_H0_F0_H1_Z0

###
# Relations
###

VT(v:V0,t:T0) input
HT(h:H0,t:T1) input
cha(n:M1,t:T1,m:M0) input
sub(t1:T1,t2:T0) input
MmethArg(m:M0,n:Z0,v:V0) input
MmethRet(m:M0,n:Z0,v:V1) input
IinvkArg0(i:I0,v:V1) input
IinvkArg(i:I0,n:Z0,v:V1) input
IinvkRet(i:I0,n:Z0,v:V0) input
MI(m:M,i:I) input
statIM(i:I,m:M) input
specIM(i:I,m:M) input
virtIM(i:I,m:M) input
statM(m:M) input

MobjValAsgnInst(m:M0,l:V0,h:H0) input
MobjVarAsgnInst(m:M0,l:V0,r:V1) input
MgetInstFldInst(m:M0,l:V0,b:V1,f:F0) input
MputInstFldInst(m:M0,b:V0,f:F0,r:V1) input
MgetStatFldInst(m:M0,l:V0,f:F0) input
MputStatFldInst(m:M0,f:F0,r:V) input

clsForNameIT(i:I0,t:T0) input
objNewInstIH(i:I0,h:H0) input
objNewInstIM(i:I0,m:M0) input
conNewInstIH(i:I0,h:H0) input
conNewInstIM(i:I0,m:M0) input
aryNewInstIH(i:I0,h:H0) input

classT(t:T) input
staticTM(t:T,m:M) input
staticTF(t:T,f:F) input
clinitTM(t:T,m:M) input

#MclsValAsgnInst(m:M0,v:V0,t:T0) input
#MgetClassInvkInst(m:M0,i:I0) input
#clsTH(t:T0,h:H0) input
#objTH(t:T0,h:H0) input

IHM1(i:I,h:H,m:M) output
VV(v1:V,v2:V)
specIMV(i:I,m:M,v:V)

objValAsgnInst(l:V,h:H) 
objVarAsgnInst(l:V,r:V) 
getInstFldInst(l:V,b:V,f:F)
putInstFldInst(b:V,f:F,r:V) 
getStatFldInst(l:V,f:F) 
putStatFldInst(f:F,r:V) 

reachableT1(t:T) output
VHfilter1(v:V,h:H) output
VH1(v:V,h:H) output
FH1(f:F,h:H) output
HFH1(h1:H,f:F,h2:H) output
rootM1(m:M) output
reachableI1(i:I) output
reachableM1(m:M) output
IM1(i:I,m:M) output
MM1(m:M,n:M) output

##Native Method Changes
allV(v:V) input
allH(h:H) input
externalLibM(m:M) input
internalLibM(m:M) input
TM(t:T,m:M) input
FT(f:F,t:T) input
statRefF(f:F) input
refTF(t:T,f:F) input
trackedBaseIM(i:I,m:M) input
trackedM(m:M) input
modcha(n:M1,t:T1,m:M0) input
modHT(h:H0,t:T1) input
MH(m:M,h:H) input
overriddenM(m:M) input
libT(t:T) input
appM(m:M) input
arrHT(h:H1,t1:T1,t2:T0) input

tempIM1(i:I,m:M)
oreachableMH(m:M, h:H)
oMM(m:M0,m:M1)
libT(t:T)
LHR(t:T,h:H)
FHfilter(f:F,h:H)
RVHTemp(v:V,h:H) output
#RVHTemp only for efficiency purposes

GHR(h:H) output
RVH1(v:V,h:H) output
#VHN(v:V,h:H) output
##

###
# Constraints
###

###########Native Method Changes##############
#FHfilter(f,h) :- staticTF(t,f), HT(h,s), sub(s,t).
FHfilter(f,h) :- FT(f,t), HT(h,s), sub(s,t), MH(m,h), appM(m).
FHfilter(_,0).

libT(t) :- trackedM(m), TM(t,m).
LHR(t,h) :- IinvkArg(i,_,u), IM1(i,m), trackedM(m), VH1(u,h), TM(t,m). split
LHR(t,h) :- FH1(f,h), libT(t), refTF(t1,f), !libT(t1).
#LHR(t,h2) :- LHR(t,h1), HFH1(h1,_,h2). 

GHR(h2) :- GHR(h1), HFH1(h1,_,h2).
GHR(h) :- LHR(_,h).
GHR(0) :- trackedM(_).

VH1(v,h) :- IinvkRet(i,_,v), IM1(i,m), trackedM(m), GHR(h), VHfilter1(v,h). split

FH1(f,h) :- GHR(h), statRefF(f), FHfilter(f,h).

HFH1(h1,f,h2) :- GHR(h1), GHR(h2), HT(h1,t), refTF(t,f), FHfilter(f,h2). split
HFH1(h1,0,h2) :- GHR(h1), GHR(h2), arrHT(h1,_,t), HT(h2,s), sub(s,t). split
HFH1(0,0,0) :- trackedM(_).
HFH1(0,f,h) :- GHR(h), refTF(_,f), FHfilter(f,h). split
HFH1(0,0,h) :- GHR(h).

#VH1(l,h2) :- getInstFldInst(l,b,_), VT(b,t), libT(t), GHR(h2), VHfilter1(l,h2). split
#LHR(t,h2) :- putInstFldInst(b,_,r), VT(b,t), libT(t), VH1(r,h2). split
#VH1(l,h) :- getStatFldInst(l,f), refTF(t,f), libT(t), GHR(h), VHfilter1(l,h). split
#LHR(t,h) :- putStatFldInst(f,r), refTF(t,f), libT(t), VH1(r,h). split

VH1(l,h2) :- getInstFldInst(l,_,f), refTF(t,f), libT(t), GHR(h2), VHfilter1(l,h2). split
GHR(h2) :- putInstFldInst(_,f,r), refTF(t,f), libT(t), VH1(r,h2). split
VH1(l,h) :- getStatFldInst(l,f), refTF(t,f), libT(t), GHR(h), VHfilter1(l,h). split
GHR(h) :- putStatFldInst(f,r), refTF(t,f), libT(t), VH1(r,h). split

oMM(m1,m2) :- overriddenM(m1), MM1(m1,m2).
oMM(m1,m3) :- oMM(m1,m2), MM1(m2,m3).
oreachableMH(m,h) :- MH(m,h), overriddenM(m).
oreachableMH(m1,h) :- oMM(m1,m2), MH(m2,h).

reachableM1(m) :- overriddenM(m), trackedM(_).
VH1(v,h) :- MmethArg(m,_,v), GHR(h), VHfilter1(v,h), overriddenM(m), trackedM(_). split
GHR(h) :- MmethRet(m,_,v), VH1(v,h), overriddenM(m), trackedM(_), oreachableMH(m,h). split


#VHN(v,h) :- allV(v), allH(h), !VH1(v,h).
RVHTemp(v,h) :- allV(v), allH(h), VH1(v,h), VHfilter1(v,h).
RVH1(v,h) :- allV(v), allH(h), VH1(v,h).
##############################################

VHfilter1(v,h) :- VT(v,t), HT(h,s), sub(s,t), MH(m,h), appM(m).
VHfilter1(_,0).

IHM1(i,h,m2) :- virtIM(i,m1), modHT(h,t), modcha(m1,t,m2).

# base cases: each root method and each class initializer is reachable
reachableM1(0).
reachableM1(m) :- reachableT1(t), clinitTM(t,m).
# inductive case
reachableM1(m) :- IM1(_,m).

reachableI1(i) :- MI(m,i), reachableM1(m), appM(m).

# possibly-multiple-target call sites
tempIM1(i,m) :- reachableI1(i), IinvkArg0(i,v), VH1(v,h), IHM1(i,h,m).
# definitely-single-target call sites
specIMV(i,m,v) :- specIM(i,m), IinvkArg0(i,v).

tempIM1(i,m) :- reachableI1(i), specIMV(i,m,v), VH1(v,_).
tempIM1(i,m) :- reachableI1(i), statIM(i,m).

IM1(i,m1) :- tempIM1(i,m1), !internalLibM(m1). 
IM1(i,m2) :- tempIM1(i,m1), internalLibM(m1), trackedBaseIM(i,m2). 

# arguments and return/throw variables
VV(v,u) :- IinvkArg(i,z,u), IM1(i,m), MmethArg(m,z,v), !externalLibM(m).
VV(u,v) :- IinvkRet(i,z,u), IM1(i,m), MmethRet(m,z,v), !externalLibM(m).

VH1(u,h) :- VV(u,v), VH1(v,h), VHfilter1(u,h).

objValAsgnInst(l,h)   :- reachableM1(m), MobjValAsgnInst(m,l,h), appM(m).
objVarAsgnInst(l,r)   :- reachableM1(m), MobjVarAsgnInst(m,l,r), appM(m).
getInstFldInst(l,b,f) :- reachableM1(m), MgetInstFldInst(m,l,b,f), appM(m).
putInstFldInst(b,f,r) :- reachableM1(m), MputInstFldInst(m,b,f,r), appM(m).
getStatFldInst(l,f)   :- reachableM1(m), MgetStatFldInst(m,l,f), appM(m).
putStatFldInst(f,r)   :- reachableM1(m), MputStatFldInst(m,f,r), appM(m).

reachableT1(t) :- reachableI1(i), conNewInstIH(i,h), HT(h,t).
reachableT1(t) :- reachableI1(i), objNewInstIH(i,h), HT(h,t).
reachableT1(t) :- reachableI1(i), clsForNameIT(i,t).

reachableM1(m) :- reachableI1(i), objNewInstIM(i,m).
reachableM1(m) :- reachableI1(i), conNewInstIM(i,m).

VH1(v,h)  :- reachableI1(i), objNewInstIM(i,m), MmethArg(m,0,v), objNewInstIH(i,h), VHfilter1(v,h).
VH1(v,h)  :- reachableI1(i), objNewInstIH(i,h), IinvkRet(i,0,v), VHfilter1(v,h).
VH1(v,h2) :- reachableI1(i), conNewInstIM(i,m), IinvkArg(i,1,u), MmethArg(m,1,v), VH1(u,h), HFH1(h,0,h2), VHfilter1(v,h2).
VH1(v,h)  :- reachableI1(i), conNewInstIM(i,m), MmethArg(m,0,v), conNewInstIH(i,h), VHfilter1(v,h).
VH1(v,h)  :- reachableI1(i), conNewInstIH(i,h), IinvkRet(i,0,v), VHfilter1(v,h).
VH1(v,h)  :- reachableI1(i), aryNewInstIH(i,h), IinvkRet(i,0,v), VHfilter1(v,h).

VH1(l,h) :- objValAsgnInst(l,h), VHfilter1(l,h).
VH1(l,h) :- objVarAsgnInst(l,r), VH1(r,h), VHfilter1(l,h), VHfilter1(l,h).
VH1(l,h2) :- getInstFldInst(l,b,f), VH1(b,h1), HFH1(h1,f,h2), VHfilter1(l,h2). split
HFH1(h1,f,h2) :- putInstFldInst(b,f,r), VH1(b,h1), VH1(r,h2). split
VH1(l,h) :- getStatFldInst(l,f), FH1(f,h), VHfilter1(l,h).
FH1(f,h) :- putStatFldInst(f,r), VH1(r,h).

## See: http://java.sun.com/docs/books/jls/second_edition/html/execution.doc.html
## Section 12.4 Initialization of Classes and Interfaces
## A class or interface type T will be initialized Immediately before
## the first occurrence of any one of the following:

# 1. T is a class and an instance of T is created.
# this handles both normal allocation and reflective allocation
reachableT1(t) :- objValAsgnInst(_,h), HT(h,t).
# 2. T is a class and a static method declared by T is invoked
reachableT1(t) :- reachableM1(m), staticTM(t,m).
# 3. A static field declared by T is assigned. 
reachableT1(t) :- putStatFldInst(f,_), staticTF(t,f).
# 4. A static field declared by T is used and the reference to the
#    field is not a compile-time constant.
reachableT1(t) :- getStatFldInst(_,f), staticTF(t,f).
# 5. Before a class is initialized, its direct superclass must be
#    initialized.
reachableT1(t) :- classT(t), reachableT1(s), sub(s,t).

rootM1(0).
rootM1(m) :- reachableT1(t), clinitTM(t,m).
MM1(m,n) :- IM1(i,n), MI(m,i), appM(m).

